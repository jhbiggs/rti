# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end

target 'ImageNotification' do
  use_frameworks!
  pod 'Firebase/Messaging'
end
#DEPLOYMENT_TARGET_IOS = '9'
#DEPLOYMENT_TARGET_MACOS = '10.12'
#post_install do |installer|
#    # Fix deployment target for pods that don't specify one
#    # or specify one that is older than our own deployment target.
#    desired_ios = Gem::Version.new(DEPLOYMENT_TARGET_IOS)
#    desired_macos = Gem::Version.new(DEPLOYMENT_TARGET_MACOS)
#
#    installer.pods_project.targets.each do |target|
#        target.build_configurations.each do |config|
#            settings = config.build_settings
#
#            actual = Gem::Version.new(settings['IPHONEOS_DEPLOYMENT_TARGET'])
#            if actual < desired_ios
#                settings['IPHONEOS_DEPLOYMENT_TARGET'] = DEPLOYMENT_TARGET_IOS
#            end
#
#            actual = Gem::Version.new(settings['MACOSX_DEPLOYMENT_TARGET'])
#            if actual < desired_macos
#                settings['MACOSX_DEPLOYMENT_TARGET'] = DEPLOYMENT_TARGET_MACOS
#            end
#        end
#    end
#end
